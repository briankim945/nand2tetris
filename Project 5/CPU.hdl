// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    // writeM
    And(a=instruction[15], b=instruction[3], out=Minput);
    And(a=true, b=Minput, out=writeM);

    // instruction or ALU output
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=insType);

    Not(in=instruction[15], out=aTrue);
    Or(a=aTrue, b=instruction[5], out=intoA);
    ARegister(in=insType, load=intoA, out=aOut, out[0..14]=addressM);

    // if i = 1 (C-instruction), then a-bit (at [12]) decides if inM or A Register input
    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=aOut, b=inM, sel=AorM, out=inOut);

    // D Register
    And(a=instruction[15], b=instruction[4], out=dTrue);
    DRegister(in=aluOutput, load=dTrue, out=dOut);

    ALU(
        x=dOut,
        y=inOut,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=outM,
        out=aluOutput,
        zr=zr,
        ng=ng);

    // Creating PC inputs

    Not(in=ng, out=g);
    Not(in=zr, out=z);
    And(a=g, b=z, out=gz);
    And(a=gz, b=instruction[0], out=j1);
    And(a=instruction[15], b=j1, out=aj1);

    And(a=instruction[1], b=zr, out=j2);
    And(a=instruction[15], b=j2, out=aj2);

    And(a=instruction[2], b=ng, out=j3);
    And(a=instruction[15], b=j3, out=aj3);

    Or(a=j1, b=j2, out=or1);
    Or(a=or1, b=j3, out=or2);
    And(a=instruction[15], b=or2, out=loadIn);

    PC(in=aOut, load=loadIn, inc=true, reset=reset, out[0..14]=pc);
}