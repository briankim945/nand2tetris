// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array powers;

    /** Initializes the library. */
    function void init() {
        var int i, p;

        // Implementing this loop causes unexplained errors in the Web IDE
        /**
        let i = 0;
        let powers = Array.new(16);
        let p = 1;

        while (i < 16) {
            let powers[i] = p;
            let p = p + p;
            let i = i + 1;
        }
        */

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        var int a;
        if (x < 0) {
            let a = -x;
        }
        else {
            let a = x;
        }
        return a;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, xShifted, i, j, p;
        var boolean negate;

        // Implementing this loop causes unexplained errors in the Web IDE
        /**
        let j = 0;
        //let powers[0] = 1;
        let p = 1;
        while (j < 16) {
            do Output.printInt(p);
            let powers[j] = p;
            do Output.printInt(p);
            let p = p + p;
            let j = j + 1;
        }
        */

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let negate = true;
        }
        else {
            let negate = false;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        let sum = 0;
        let xShifted = x;
        let i = 0;
        let p = 1;

        while (i < 15) {
            if ((y & p) > 0) {
                let sum = sum + xShifted;
            }
            let xShifted = xShifted + xShifted;
            let i = i + 1;
            let p = p + p;
        }

        if (negate) {
            let sum = -sum;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, result;
        var boolean negate;

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let negate = true;
        }
        else {
            let negate = false;
        }

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            let q = 0;
        }
        else {
            if (y > 16383) {
                let q = 0;
            }
            else {
                let q = Math.divide(x, 2 * y) * 2;
            }

            if ((x - (q * y)) < y) {
                let result = q;
            }
            else {
                let result = q + 1;
            }
        }

        if (negate & (result > 0)) {
            let result = -result;
        }

        return result;
    }

    /** Returns the integer power of x raised to y */
    function int pow(int x, int y) {
        var int power, i;

        let i = y;
        let power = 1;
        while (i > 0) {
            let power = Math.multiply(power, x);
            let i = i - 1;
        }
        return power;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, item;

        let y = 0;
        let j = 7;

        while (j > -1) {
            let item = y + Math.pow(2,j);
            let item = item * item;
            if (((item < x) | (item = x)) & (item > 0)) {
                let y = y + Math.pow(2,j);
            }
            let j = j - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        var int m;
        if (a > b) {
            let m = a;
        }
        else {
            let m = b;
        }
        return m;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        var int m;
        if (a < b) {
            let m = a;
        }
        else {
            let m = b;
        }
        return m;
    }
}
